<?php
/**
 * @table paysystems
 * @id authorize-sim
 * @title Authorize.Net SIM Integration
 * @visible_link http://www.authorize.net/
 * @hidden_link http://mymoolah.com/partners/amember/
 * @recurring none
 * @logo_url authorizenet.png
 * @country US
 */
class Am_Paysystem_AuthorizeSim extends Am_Paysystem_Abstract
{

    const PLUGIN_STATUS = self::STATUS_BETA;
    const PLUGIN_REVISION = '4.6.3';

    protected $defaultTitle = 'Authorize.NET SIM';
    protected $defaultDescription = 'accepts all major credit cards';

    const URL_TEST = 'https://test.authorize.net/gateway/transact.dll';
    const URL_LIVE = 'https://secure.authorize.net/gateway/transact.dll';

    public function _initSetupForm(Am_Form_Setup $form)
    {
        $form->addText('login')
            ->setLabel(array('Authorize.Net API Login ID',
            "The API login is different from your Authorize.net username\n" .
            "You can get at the same time as the Transaction Key"))
            ->addRule('required');

        $form->addText('tkey')
            ->setLabel(array('Transaction Key',
                "The transaction key is generated by the system\n" .
                "and can be obtained from Merchant Interface.\n" . 
                "To obtain the transaction key from the Merchant Interface:\n" .
                "1. Log into the Merchant Interface\n" .
                "2. Select Settings from the Main Menu\n" .
                "3. Click on Obtain Transaction Key in the Security section\n" .
                "4. Type in the answer to the secret question configured on setup\n" .
                "5. Click Submit"))
            ->addRule('required');

        $form->addPassword('secret')
            ->setLabel(array('Secret Word',
                "From authorize.net MD5 Hash menu\n" .
                "You have to create secret word"))
            ->addRule('required');

        $form->addAdvCheckbox('testmode')
            ->setLabel('Is Test Mode?');

        $form->addAdvCheckbox('devmode')
            ->setLabel(array('Is Developer Account?',
                'Select it if you are using developer API Login ID'));

    }

    protected function getRedirectUrl()
    {
        return ($this->getConfig('devmode')) ? self::URL_TEST : self::URL_LIVE;
    }

    protected function getTestRequestStatus()
    {
        return (!$this->getConfig('devmode') && $this->getConfig('testmode')) ? 'TRUE' : 'FALSE';
    }

    public function _process(Invoice $invoice, Am_Request $request, Am_Paysystem_Result $result)
    {
        $vars = array(  
            'x_version'   => '3.1',
            'x_login'     => $this->getConfig('login'),
            'x_test_request' => $this->getTestRequestStatus(),
            'x_show_form' => 'PAYMENT_FORM',
            'x_amount'    => $price = sprintf('%.2f', $invoice->first_total),
            'x_receipt_link_url' => $this->getPluginUrl('thanks'),
            'x_relay_url'   => $this->getPluginUrl('thanks'),
            'x_relay_response' => 'TRUE',
            'x_cancel_url' => $this->getCancelUrl(),
            'x_invoice_num'   => $invoice->public_id,
            'x_cust_id'       => $invoice->getUserId(),
            'x_description'   => $invoice->getLineDescription(),

            'x_fp_sequence' => $invoice->public_id,
            'x_fp_timestamp' => $tstamp = time(),

            'x_address' => $invoice->getStreet(),
            'x_city' => $invoice->getCity(),
            'x_country' => $invoice->getCountry(),
            'x_state' => $invoice->getState(),
            'x_zip' => $invoice->getZip(),
            'x_email' => $invoice->getEmail(),
            'x_first_name' => $invoice->getFirstName(),
            'x_last_name' => $invoice->getLastName(),

            'x_fp_hash' => hash_hmac('md5', $this->getConfig('login')."^".$invoice->public_id."^".$tstamp."^".$price."^", $this->getConfig('tkey'))
        );

        $action = new Am_Paysystem_Action_Redirect($this->getRedirectUrl() . "?" . http_build_query($vars, '', '&'));

        $result->setAction($action);
    }

    public function getRecurringType()
    {
        return self::REPORTS_NOT_RECURRING;
    }

    public function getReadme()
    {
        return <<<CUT
Login into your merchant account <a href="https://account.authorize.net/">https://account.authorize.net/</a>
and go to "Home -> ACCOUNT -> Settings" menu.

Installation steps: 

1. Go to "Transaction Format Settings -> Transaction Submission Settings -> Payment Form" and then to "Form Fields" menu.
   At least uncheck all boxes near "Customer ID". You can also disable another
   fields to make signup a bit less painful for your customers.

2. Go to "Security Settings -> General Security Settings -> MD5-Hash" menu.
   Set secret word to desired values 
   (it is important that it is the same as configured in aMember).
   
3. Go to "Account -> Settings -> Transaction Format Settings -> Transaction Response Settings -> Relay Response",
   paste in URL field this url: {$this->getPluginUrl('thanks')}
   and click submit.

4. If you don't know API Login ID and Transaction Key 
   go to "Security Settings -> General Security Settings -> API Login ID and Transaction Key" menu.
   Find API Login ID and create new transaction key
   (it is important that it is the same as configured in aMember).
CUT;
    }

    public function createTransaction(Am_Request $request, Zend_Controller_Response_Http $response, array $invokeArgs)
    {
        return new Am_Paysystem_Transaction_AuthorizeSim($this, $request, $response, $invokeArgs);
    }

    public function createThanksTransaction(Am_Request $request, Zend_Controller_Response_Http $response, array $invokeArgs)
    {
        return new Am_Paysystem_Transaction_AuthorizeSim($this, $request, $response, $invokeArgs);
    }
}

class Am_Paysystem_Transaction_AuthorizeSim extends Am_Paysystem_Transaction_Incoming
{
    protected $result;
    public function process()
    {
        $this->result = $this->request->getPost();
        parent::process();
    }

    public function validateSource()
    {
        return true;
    }

    public function findInvoiceId()
    {
        return (string) $this->result['x_invoice_num'];
    }

    public function validateStatus()
    {
        return (
            intval($this->result['x_response_code']) == 1 &&
            strtoupper(
                md5(
                    $this->plugin->getConfig('secret') .
                    $this->plugin->getConfig('login') .
                    $this->result['x_trans_id'] .
                    $this->result['x_amount']
                )
            ) == $this->result['x_MD5_Hash']
        );
    }

    public function getUniqId()
    {
        return (string) $this->result['x_trans_id'];
    }

    public function validateTerms()
    {
        $this->assertAmount($this->invoice->first_total, (string)$this->result['x_amount']);
        return true;
    }

}